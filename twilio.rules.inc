<?php
/**
 * @file
 * Rules module integration
 */

/**
 * Implements hook_rules_data_info().
 */
function twilio_rules_data_info() {
  return array(
    'sms' => array(
      'label' => t('Twilio incoming SMS'),
      'wrap' => TRUE,
      'property info' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Number'),
          'description' => t('The phone number of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'number_twilio' => array(
          'type' => 'text',
          'label' => t('Twilio Number'),
          'description' => t('The Twilio phone number that receieved the message.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
          'description' => t('The message of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'media' => array(
          'type' => 'text',
          'label' => t('Media'),
          'description' => t('The media attached to the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
      ),
    ),
    'voice' => array(
      'label' => t('Twilio incoming Voice'),
      'wrap' => TRUE,
      'property info' => array(
        'call_sid' => array(
          'type' => 'text',
          'label' => t('CallSid'),
          'description' => t('A unique identifier for this call, generated by Twilio.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'account_sid' => array(
          'type' => 'text',
          'label' => t('AccountSid'),
          'description' => t('The Twilio account id. It is 34 characters long, and always starts with the letters AC.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t('The phone number or client identifier of the party that initiated the call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
          'description' => t('The phone number or client identifier of the called party.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'call_status' => array(
          'type' => 'text',
          'label' => t('CallStatus'),
          'description' => t('A descriptive status for the call'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
          'options list' => twilio_call_status_options(),
        ),
        'api_version' => array(
          'type' => 'text',
          'label' => t('ApiVersion'),
          'description' => t('The version of the Twilio API used to handle this call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'direction' => array(
          'type' => 'text',
          'label' => t('Direction'),
          'description' => t('A string describing the direction of the call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'forwarded_from' => array(
          'type' => 'text',
          'label' => t('ForwardedFrom'),
          'description' => t('This parameter is set only when Twilio receives a forwarded call, but its value depends on the caller\'s carrier including information when forwarding.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'caller_name' => array(
          'type' => 'text',
          'label' => t('CallerName'),
          'description' => t('The caller name from CNAM database.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
      ),
    ),
  );
}

function twilio_call_status_options() {
  return array(
    'queued' => t('Queued'),           //The call is ready and waiting in line before going out.
    'ringing' => t('Ringing'),         //The call is currently ringing.
    'in-progress' => t('In Progress'), //The call was answered and is currently in progress.
    'completed' => t('Completed'),     //The call was answered and has ended normally.
    'busy' => t('Busy'),               //The caller received a busy signal.
    'failed' => t('Failed'),           //The call could not be completed as dialed, most likely because the phone number was non-existent.
    'no-answer' => t('No Answer'),     //The call ended without being answered.
    'canceled' => t('Canceled'),       //The call was canceled via the REST API while queued or ringing.
  );
}

/**
 * Implements hook_event_info().
 */
function twilio_rules_event_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  return array(
    'twilio_sms_incoming' => $defaults + array(
      'label' => t('Drupal receives an SMS'),
      'variables' => array(
        'sms' => array(
          'type' => 'sms',
          'label' => t('Twilio incoming SMS'),
        ),
      ),
    ),
    'twilio_voice_incoming' => $defaults + array(
      'label' => t('Drupal receives a voice call'),
      'variables' => array(
        'voice' => array(
          'type' => 'voice',
          'label' => t('Twilio incoming Voice'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_condition_info().
 */
function twilio_rules_condition_info() {
  return array(
    'twilio_rules_condition_number_belongs_to_user' => array(
      'label' => t('Number belongs to a valid user'),
      'arguments' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Phone Number'),
        ),
      ),
      'group' => t('Twilio'),
      'module' => 'twilio',
    ),
    'twilio_rules_condition_user_has_verified_number' => array(
      'label' => t('User has a verified number'),
      'arguments' => array(
        'account' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
      ),
      'group' => t('Twilio'),
      'module' => 'twilio',
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 */
function twilio_rules_action_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  $actions['twilio_send_sms_to_user'] = $defaults + array(
    'label' => t('Send an SMS to a user'),
    'base' => 'twilio_rules_action_send_sms_to_user',
    'parameter' => array(
      'account' => array(
        'type' => 'user',
        'label' => t('User'),
        'save' => TRUE,
      ),
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_send_sms_to_all_users'] = $defaults + array(
    'label' => t('Send an SMS to all users'),
    'base' => 'twilio_rules_action_send_sms_to_all_users',
    'parameter' => array(
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_send_sms_to_number'] = $defaults + array(
    'label' => t('Send an SMS to a number'),
    'base' => 'twilio_rules_action_send_sms_to_number',
    'parameter' => array(
      'country' => array(
        'type' => 'text',
        'label' => t('Country code'),
        'options list' => 'twilio_country_codes',
      ),
      'number' => array(
        'type' => 'text',
        'label' => t('Number'),
      ),
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_twiml_say'] = $defaults + array(
    'label' => t('Say'),
    'base' => 'twilio_rules_twiml_say',
    'parameter' => array(
      'voice' => array(
        'type' => 'text',
        'label' => t('Voice'),
        'options list' => 'twilio_voice_options',
      ),
      'loop' => array(
        'type' => 'integer',
        'label' => t('Loop'),
      ),
      'language' => array(
        'type' => 'text',
        'label' => t('Language'),
        'options list' => 'twilio_language_options',
      ),
      'text' => array(
        'type' => 'text',
        'label' => t('Text'),
      ),
      'response' => array(
        'type' =>
      ),
    ),
  );
  $actions['twilio_twiml_play'] = $defaults + array(
    'label' => t('Play'),
    'base' => 'twilio_rules_twiml_play',
    'parameter' => array(
      'loop' => array(
        'type' => 'integer',
        'label' => t('Loop'),
      ),
      'digits' => array(
        'type' => 'text',
        'label' => t('Digits'),
      ),
      'text' => array(
        'type' => 'text',
        'label' => t('Text'),
      ),
      'response' => array(
        'type' =>
      ),
    ),
  );
  $actions['twilio_twiml_gather'] = $defaults + array(
    'label' => t('Gather'),
    'base' => 'twilio_rules_twiml_gather',
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
      ),
      'finish_on_key' => array(
        'type' => 'text',
        'label' => t('Finish on Key'),
      ),
      'num_digits' => array(
        'type' => 'integer',
        'label' => t('Number of Digits'),
      ),
      'response' => array(
        'type' =>
      ),
    ),
  );
  $actions['twilio_twiml_record'] = $defaults + array(
    'label' => t('Gather'),
    'base' => 'twilio_rules_twiml_record',
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
      ),
      'finish_on_key' => array(
        'type' => 'text',
        'label' => t('Finish on Key'),
      ),
      'max_length' => array(
        'type' => 'integer',
        'label' => t('Maximum Length'),
      ),
      'transcribe' => array(
        'type' => 'boolean',
        'label' => t('Transcribe'),
      ),
      'transcribe_callback' => array(
        'type' => 'uri',
        'label' => t('Transcribe Callback'),
      ),
      'play_beep' => array(
        'type' => 'boolean',
        'label' => t('Play Beep'),
      ),
      'trim' => array(
        'type' => 'boolean',
        'label' => t('Trim'),
      ),
      'response' => array(
        'type' =>
      ),
    ),
  );
  $actions['twilio_twiml_dial'] = $defaults + array(
    'label' => t('Dial'),
    'base' => 'twilio_rules_twiml_dial',
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
      ),
      'hangup_on_star' => array(
        'type' => 'boolean',
        'label' => t('Hangup on Star'),
      ),
      'time_limit' => array(
        'type' => 'integer',
        'label' => t('Time Limit'),
      ),
      'caller_id' => array(
        'type' => 'text',
        'label' => t('Caller ID'),
      ),
      'record' => array(
        'type' => 'text',
        'label' => t('Record'),
        'options list' => 'twilio_record_options',
      ),
      'trim' => array(
        'type' => 'boolean',
        'label' => t('Trim'),
      ),
      'response' => array(
        'type' =>
      ),
    ),
  );

  return $actions;
}

function twilio_voice_options() {
  return array(
    'man' => t('Man'),
    'woman' => t('Woman'),
    'alice' => t('Alize'),
  );
}

function twilio_language_options() {
  return array(
    'da-DK' => t('Danish, Denmark'),
    'de-DE' => t('German, Germany'),
    'en-AU' => t('English, Australia'),
    'en-CA' => t('English, Canada'),
    'en-GB' => t('English, UK'),
    'en-IN' => t('English, India'),
    'en-US' => t('English, United States'),
    'ca-ES' => t('Catalan, Spain'),
    'es-ES' => t('Spanish, Spain'),
    'es-MX' => t('Spanish, Mexico'),
    'fi-FI' => t('Finnish, Finland'),
    'fr-CA' => t('French, Canada'),
    'fr-FR' => t('French, France'),
    'it-IT' => t('Italian, Italy'),
    'ja-JP' => t('Japanese, Japan'),
    'ko-KR' => t('Korean, Korea'),
    'nb-NO' => t('Norwegian, Norway'),
    'nl-NL' => t('Dutch, Netherlands'),
    'pl-PL' => t('Polish-Poland'),
    'pt-BR' => t('Portuguese, Brazil'),
    'pt-PT' => t('Portuguese, Portugal'),
    'ru-RU' => t('Russian, Russia'),
    'sv-SE' => t('Swedish, Sweden'),
    'zh-CN' => t('Chinese (Mandarin)'),
    'zh-HK' => t('Chinese (Cantonese)'),
    'zh-TW' => t('Chinese (Taiwanese Mandarin)'),
  );
}

function twilio_record_options() {
  return array();
}

/**
 * Action: Send an SMS to a user.
 */
function twilio_rules_action_send_sms_to_user($account, $message, $media) {
  if (!empty($account->twilio_user['number']) && $account->twilio_user['status'] == 2) {
    twilio_send($account->twilio_user['number'], $message, $account->twilio_user['country'], $media);
  }
}

/**
 * Action: Send an SMS to all users.
 */
function twilio_rules_action_send_sms_to_all_users($message, $media) {
  // Fetch all site users with confirmed numbers.
  $results = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAll();
  // If we have results, iterate through and send the message.
  if (!empty($results)) {
    foreach ($results as $result) {
      twilio_send($result->number, $message, $result->country, $media);
    }
  }
}

/**
 * Action: Send an SMS to a number.
 */
function twilio_rules_action_send_sms_to_number($country, $number, $message, $media) {
  twilio_send($number, $message, $country, $media);
}

/**
 * Condition: Validate if a number belongs to a user on the site.
 */
function twilio_rules_condition_number_belongs_to_user($number) {
  return twilio_verify_number($number);
}

/**
 * Condition: Validate if the user has a verified number.
 */
function twilio_rules_condition_user_has_verified_number($user) {
  // Check if the user has TWILIO_USER_CONFIRMED status.
  if (!empty($user->twilio_user) && $user->twilio_user['status'] == TWILIO_USER_CONFIRMED) {
    return TRUE;
  }
  return FALSE;
}
