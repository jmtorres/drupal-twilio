<?php
/**
 * @file
 * Rules module integration
 */

/**
 * Implements hook_rules_data_info().
 */
function twilio_rules_data_info() {
  return array(
    'twilio_sms_request' => array(
      'label' => t('Twilio incoming SMS'),
      'wrap' => TRUE,
      'property info' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Number'),
          'description' => t('The phone number of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'number_twilio' => array(
          'type' => 'text',
          'label' => t('Twilio Number'),
          'description' => t('The Twilio phone number that receieved the message.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
          'description' => t('The message of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'media' => array(
          'type' => 'text',
          'label' => t('Media'),
          'description' => t('The media attached to the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
      ),
    ),
    'twilio_voice_request' => array(
      'label' => t('Twilio Incoming Voice request'),
      'wrap' => TRUE,
      'property info' => array(
        'call_sid' => array(
          'type' => 'text',
          'label' => t('Call SID'),
          'description' => t('A unique identifier for this call, generated by Twilio.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'account_sid' => array(
          'type' => 'text',
          'label' => t('Account SID'),
          'description' => t('The Twilio account id. It is 34 characters long, and always starts with the letters AC.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t('The phone number or client identifier of the party that initiated the call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
          'description' => t('The phone number or client identifier of the called party.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'call_status' => array(
          'type' => 'text',
          'label' => t('Call Status'),
          'description' => t('A descriptive status for the call'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
          'options list' => twilio_call_status_options(),
        ),
        'api_version' => array(
          'type' => 'text',
          'label' => t('API Version'),
          'description' => t('The version of the Twilio API used to handle this call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'direction' => array(
          'type' => 'text',
          'label' => t('Direction'),
          'description' => t('A string describing the direction of the call.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'forwarded_from' => array(
          'type' => 'text',
          'label' => t('Forwarded From'),
          'description' => t('This parameter is set only when Twilio receives a forwarded call, but its value depends on the caller\'s carrier including information when forwarding.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'caller_name' => array(
          'type' => 'text',
          'label' => t('Caller Name'),
          'description' => t('The caller name from CNAM database.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
      ),
    ),
    'twilio_gather_request' => array(
      'label' => t('Twilio Incoming Voice request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'digits' => array(
          'type' => 'text',
          'label' => t('Digits'),
          'description' => t('The digits the caller pressed, excluding the finishOnKey digit if used.'),
        ),
      ),
    ),
    'twilio_record_request' => array(
      'label' => t('Twilio Record request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'recording_duration' => array(
          'type' => 'integer',
          'label' => t('Recording Duration'),
          'description' => t('The duration of the recorded audio (in seconds).'),
        ),
        'digits' => array(
          'type' => 'text',
          'label' => t('Digits'),
          'description' => t('The key (if any) pressed to end the recording or \'hangup\' if the caller hung up'),
        ),
      ),
    ),
    'twilio_queue_result_request' => array(
      'label' => t('Twilio Queue Result request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'queue_result' => array(
          'type' => 'text',
          'label' => t('Queue Result'),
          'description' => t('The final result of the enqueued call.'),
          'options list' => 'twilio_queue_result_options_list',
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'queue_time' => array(
          'type' => 'integer',
          'label' => t('Queue Time'),
          'description' => t('The time the call spent in the queue.'),
        ),
      ),
    ),
    'twilio_queue_wait_request' => array(
      'label' => t('Twilio Queue Result request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'queue_position' => array(
          'type' => 'integer',
          'label' => t('Queue Position'),
          'description' => t('The current queue position for the enqueued call.'),
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'queue_time' => array(
          'type' => 'integer',
          'label' => t('Queue Time'),
          'description' => t('The time the call spent in the queue.'),
        ),
        'avg_queue_time' => array(
          'type' => 'integer',
          'label' => t('Average Queue Time'),
          'description' => t('An average of how long time the current enqueued callers has been in the queue.'),
        ),
        'current_queue_size' => array(
          'type' => 'integer',
          'label' => t('Current Queue Size'),
          'description' => t('The current number of enqueued calls in this queue.'),
        ),
      ),
    ),
    'twilio_call_status_request' => array(
      'label' => t('Twilio Call Status request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'call_duration' => array(
          'type' => 'integer',
          'label' => t('Call Duration'),
          'description' => t('The duration in seconds of the just-completed call.'),
        ),
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'recording_sid' => array(
          'type' => 'text',
          'label' => t('Recording SID'),
          'description' => t('The unique id of the Recording from this call.'),
        ),
        'recording_duration' => array(
          'type' => 'integer',
          'label' => t('Recording Duration'),
          'description' => t('The duration of the recorded audio (in seconds).'),
        ),
      ),
    ),
    'twilio_dial_call_status_request' => array(
      'label' => t('Twilio Dial Call Status request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'dial_call_status' => array(
          'type' => 'text',
          'label' => t('Dial Call Status'),
          'description' => t('The outcome of the <Dial> attempt.'),
        ),
        'dial_call_sid' => array(
          'type' => 'text',
          'label' => t('Dial Call SID'),
          'description' => t('The call sid of the new call leg.'),
        ),
        'dial_call_duration' => array(
          'type' => 'integer',
          'label' => t('Dial Call Duration'),
          'description' => t('The duration in seconds of the dialed call.'),
        ),
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'dequeue_result' => array(
          'text' => 'text',
          'label' => t('Dequeue Result'),
          'description' => t('One of invalid, bridged, queue-not-found, queue-empty or failed.'),
        ),
        'dequeued_call_sid' => array(
          'type' => 'text',
          'label' => t('Dequeued Call SID'),
          'description' => t('The CallSid of the dequeued call.'),
        ),
        'dequeued_call_queue_time' => array(
          'type' => 'integer',
          'label' => t('Dequeued Call Queue Time'),
          'description' => t('The time the dequeued call spent waiting in the queue.'),
        ),
        'dequeued_call_duration' => array(
          'type' => 'integer',
          'label' => t('Dequeued Call Duration'),
          'description' => t('The time the call was bridged with the dequeued call.'),
        ),
      ),
    ),
    'twilio_sms_status_request' => array(
      'label' => t('Twilio SMS Status request'),
      'wrap' => TRUE,
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'sms_sid' => array(
          'type' => 'text',
          'label' => t('SMS SID'),
          'description' => t('The Sid Twilio has assigned for the SMS message.'),
        ),
        'sms_status' => array(
          'type' => 'text',
          'label' => t('SMS Status'),
          'description' => t('The current status of the SMS message. '),
          'options list' => 'twilio_sms_status_options_list',
        ),
      ),
    ),
    'twilio_twiml_response' => array(
      'label' => t('Twiml Response'),
      'wrap' => TRUE,
    )
  );
}

/**
 * Implements hook_event_info().
 */
function twilio_rules_event_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  return array(
    'twilio_sms_incoming' => $defaults + array(
      'label' => t('Drupal receives an SMS'),
      'variables' => array(
        'sms' => array(
          'type' => 'sms',
          'label' => t('Twilio incoming SMS'),
        ),
      ),
    ),
    'twilio_voice_incoming' => $defaults + array(
      'label' => t('Drupal receives a voice call'),
      'variables' => array(
        'voice_request' => array(
          'type' => 'twilio_voice_request',
          'label' => t('Twilio Voice Request'),
        ),
        'twiml_response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_condition_info().
 */
function twilio_rules_condition_info() {
  return array(
    'twilio_rules_condition_number_belongs_to_user' => array(
      'label' => t('Number belongs to a valid user'),
      'arguments' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Phone Number'),
        ),
      ),
      'group' => t('Twilio'),
      'module' => 'twilio',
    ),
    'twilio_rules_condition_user_has_verified_number' => array(
      'label' => t('User has a verified number'),
      'arguments' => array(
        'account' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
      ),
      'group' => t('Twilio'),
      'module' => 'twilio',
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 */
function twilio_rules_action_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  $actions['twilio_send_sms_to_user'] = $defaults + array(
    'label' => t('Send an SMS to a user'),
    'base' => 'twilio_rules_action_send_sms_to_user',
    'parameter' => array(
      'account' => array(
        'type' => 'user',
        'label' => t('User'),
        'save' => TRUE,
      ),
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_send_sms_to_all_users'] = $defaults + array(
    'label' => t('Send an SMS to all users'),
    'base' => 'twilio_rules_action_send_sms_to_all_users',
    'parameter' => array(
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_send_sms_to_number'] = $defaults + array(
    'label' => t('Send an SMS to a number'),
    'base' => 'twilio_rules_action_send_sms_to_number',
    'parameter' => array(
      'country' => array(
        'type' => 'text',
        'label' => t('Country code'),
        'options list' => 'twilio_country_codes',
      ),
      'number' => array(
        'type' => 'text',
        'label' => t('Number'),
      ),
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'media' => array(
        'type' => 'text',
        'optional' => TRUE,
        'label' => t('Media path'),
      ),
    ),
  );
  $actions['twilio_twiml_say'] = $defaults + array(
    'label' => t('Say'),
    'base' => 'twilio_rules_twiml_say',
    'named parameter' => TRUE,
    'parameter' => array(
      'voice' => array(
        'type' => 'text',
        'label' => t('Voice'),
        'optional' => TRUE,
        'options list' => 'twilio_voice_options_list',
      ),
      'loop' => array(
        'type' => 'integer',
        'label' => t('Loop'),
        'optional' => TRUE,
      ),
      'language' => array(
        'type' => 'text',
        'label' => t('Language'),
        'optional' => TRUE,
        'options list' => 'twilio_language_options_list',
      ),
      'text' => array(
        'type' => 'text',
        'label' => t('Text'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );
  $actions['twilio_twiml_play'] = $defaults + array(
    'label' => t('Play'),
    'base' => 'twilio_rules_twiml_play',
    'named parameter' => TRUE,
    'parameter' => array(
      'loop' => array(
        'type' => 'integer',
        'label' => t('Loop'),
        'optional' => TRUE,
      ),
      'digits' => array(
        'type' => 'text',
        'label' => t('Digits'),
        'optional' => TRUE,
      ),
      'text' => array(
        'type' => 'text',
        'label' => t('Text'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );
  $actions['twilio_twiml_gather'] = $defaults + array(
    'label' => t('Gather'),
    'base' => 'twilio_rules_twiml_gather',
    'named parameter' => TRUE,
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
        'optional' => TRUE,
      ),
      'finish_on_key' => array(
        'type' => 'text',
        'label' => t('Finish on Key'),
        'optional' => TRUE,
      ),
      'num_digits' => array(
        'type' => 'integer',
        'label' => t('Number of Digits'),
        'optional' => TRUE,
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
    'provides' => array(
      'gather_response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Gather Response'),
      ),
    ),
  );
  $actions['twilio_twiml_record'] = $defaults + array(
    'label' => t('Record'),
    'base' => 'twilio_rules_twiml_record',
    'named parameter' => TRUE,
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
        'optional' => TRUE,
      ),
      'finish_on_key' => array(
        'type' => 'text',
        'label' => t('Finish on Key'),
        'optional' => TRUE,
      ),
      'max_length' => array(
        'type' => 'integer',
        'label' => t('Maximum Length'),
        'optional' => TRUE,
      ),
      'transcribe' => array(
        'type' => 'boolean',
        'label' => t('Transcribe'),
        'optional' => TRUE,
      ),
      'transcribe_callback' => array(
        'type' => 'uri',
        'label' => t('Transcribe Callback'),
        'optional' => TRUE,
      ),
      'play_beep' => array(
        'type' => 'boolean',
        'label' => t('Play Beep'),
        'optional' => TRUE,
      ),
      'trim' => array(
        'type' => 'boolean',
        'label' => t('Trim'),
        'optional' => TRUE,
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );
  $actions['twilio_twiml_dial'] = $defaults + array(
    'label' => t('Dial'),
    'base' => 'twilio_rules_twiml_dial',
    'named parameter' => TRUE,
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
        'default value' => NULL,
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
        'optional' => TRUE,
      ),
      'hangup_on_star' => array(
        'type' => 'boolean',
        'label' => t('Hangup on Star'),
        'optional' => TRUE,
      ),
      'time_limit' => array(
        'type' => 'integer',
        'label' => t('Time Limit'),
        'optional' => TRUE,
      ),
      'caller_id' => array(
        'type' => 'text',
        'label' => t('Caller ID'),
        'optional' => TRUE,
      ),
      'record' => array(
        'type' => 'text',
        'label' => t('Record'),
        'optional' => TRUE,
        'options list' => 'twilio_record_options_list',
      ),
      'trim' => array(
        'type' => 'boolean',
        'label' => t('Trim'),
        'optional' => TRUE,
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
    'provides' => array(
      'dial_response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Dial Response'),
      )
    ),
  );

  $actions['twilio_twiml_sms'] = $defaults + array(
    'label' => t('SMS'),
    'base' => 'twilio_rules_twiml_sms',
    'named parameter' => TRUE,
    'parameter' => array(
      'to' => array(
        'type' => 'text',
        'label' => t('To'),
      ),
      'from' => array(
        'type' => 'text',
        'label' => t('From'),
      ),
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
        'optional' => TRUE,
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'timeout' => array(
        'type' => 'integer',
        'label' => t('Timeout'),
        'optional' => TRUE,
      ),
      'status_callback' => array(
        'type' => 'uri',
        'label' => t('StatusCallback'),
        'optional' => TRUE,
      ),
      'message' => array(
        'type' => 'text',
        'label' => t('Message'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_enqueue'] = $defaults + array(
    'label' => t('Enqueue'),
    'base' => 'twilio_rules_twiml_enqueue',
    'named parameter' => TRUE,
    'parameter' => array(
      'action' => array(
        'type' => 'uri',
        'label' => t('Action'),
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'wait_url' => array(
        'type' => 'uri',
        'label' => t('WaitUrl'),
        'optional' => TRUE,
      ),
      'wait_url_method' => array(
        'type' => 'text',
        'label' => t('WaitUrlMethod'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'workflow_sid' => array(
        'type' => 'text',
        'label' => t('workflowSid'),
        'optional' => TRUE,
      ),
      'queue_name' => array(
        'type' => 'text',
        'label' => t('Queue Name'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_redirect'] = $defaults + array(
    'label' => t('Redirect'),
    'base' => 'twilio_rules_twiml_enqueue',
    'named parameter' => TRUE,
    'parameter' => array(
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'options list' => 'twilio_method_options_list',
      ),
      'destination' => array(
        'type' => 'uri',
        'label' => t('Destination'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_reject'] = $defaults + array(
    'label' => t('Reject'),
    'base' => 'twilio_rules_twiml_reject',
    'named parameter' => TRUE,
    'parameter' => array(
      'reason' => array(
        'type' => 'text',
        'label' => t('Reason'),
        'optional' => TRUE,
        'options list' => 'twilio_reason_options_list',
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_pause'] = $defaults + array(
    'label' => t('Pause'),
    'base' => 'twilio_rules_twiml_pause',
    'named parameter' => TRUE,
    'parameter' => array(
      'length' => array(
        'type' => 'integer',
        'label' => t('Length'),
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_leave'] = $defaults + array(
    'label' => t('Leave'),
    'base' => 'twilio_rules_twiml_leave',
    'named parameter' => TRUE,
    'parameter' => array(
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  $actions['twilio_twiml_client'] = $defaults + array(
    'label' => t('Client'),
    'base' => 'twilio_rules_twiml_client',
    'parameter' => array(
      'url' => array(
        'type' => 'uri',
        'label' => t('URL'),
        'optional' => TRUE,
      ),
      'method' => array(
        'type' => 'text',
        'label' => t('Method'),
        'optional' => TRUE,

        'options list' => 'twilio_method_options_list',
      ),
      'status_callback_event' => array(
        'type' => 'list<text>',
        'label' => t('Status Callback Event'),
        'optional' => TRUE,
        'options list' => 'twilio_status_callback_options_list',
      ),
      'status_callback' => array(
        'type' => 'uri',
        'label' => t('Status Callback'),
        'optional' => TRUE,
      ),
      'status_callback_method' => array(
        'type' => 'text',
        'label' => t('Status Callback Method'),
        'optional' => TRUE,
        'options list' => 'twilio_method_options_list',
      ),
      'response' => array(
        'type' => 'twilio_twiml_response',
        'label' => t('Twiml Response'),
      ),
    ),
  );

  return $actions;
}

function twilio_status_callback_options_list() {
  return array(
    'initiated' => t('Initiated'),
    'ringing' => t('Ringing'),
    'answered' => t('Answered'),
    'completed' => t('Completed'),
  );
}

function twilio_reason_options_list() {
  return array(
    'rejected' => t('Rejected'),
    'busy' => t('Busy'),
  );
}

function twilio_method_options_list() {
  return array(
    'GET' => 'GET',
    'POST' => 'POST',
  );
}

function twilio_voice_options_list() {
  return array(
    'man' => t('Man'),
    'woman' => t('Woman'),
    'alice' => t('Alice'),
  );
}

function twilio_language_options_list() {
  return array(
    'da-DK' => t('Danish, Denmark'),
    'de-DE' => t('German, Germany'),
    'en-AU' => t('English, Australia'),
    'en-CA' => t('English, Canada'),
    'en-GB' => t('English, UK'),
    'en-IN' => t('English, India'),
    'en-US' => t('English, United States'),
    'ca-ES' => t('Catalan, Spain'),
    'es-ES' => t('Spanish, Spain'),
    'es-MX' => t('Spanish, Mexico'),
    'fi-FI' => t('Finnish, Finland'),
    'fr-CA' => t('French, Canada'),
    'fr-FR' => t('French, France'),
    'it-IT' => t('Italian, Italy'),
    'ja-JP' => t('Japanese, Japan'),
    'ko-KR' => t('Korean, Korea'),
    'nb-NO' => t('Norwegian, Norway'),
    'nl-NL' => t('Dutch, Netherlands'),
    'pl-PL' => t('Polish-Poland'),
    'pt-BR' => t('Portuguese, Brazil'),
    'pt-PT' => t('Portuguese, Portugal'),
    'ru-RU' => t('Russian, Russia'),
    'sv-SE' => t('Swedish, Sweden'),
    'zh-CN' => t('Chinese (Mandarin)'),
    'zh-HK' => t('Chinese (Cantonese)'),
    'zh-TW' => t('Chinese (Taiwanese Mandarin)'),
  );
}

function twilio_record_options_list() {
  return array(
    'do-not-record' => t('Do not record'),
    'record-from-answer' => t('Record from answer'),
    'record-from-ringing' => t('Record from ringing'),
    'record-from-answer-dual' => t('Record from answer (Dual Channel)'),
    'record-from-ringing-dual' => t('Record from ringing (Dual Channel)'),
  );
}

function twilio_call_status_options() {
  return array(
    'queued' => t('Queued'),           //The call is ready and waiting in line before going out.
    'ringing' => t('Ringing'),         //The call is currently ringing.
    'in-progress' => t('In Progress'), //The call was answered and is currently in progress.
    'completed' => t('Completed'),     //The call was answered and has ended normally.
    'busy' => t('Busy'),               //The caller received a busy signal.
    'failed' => t('Failed'),           //The call could not be completed as dialed, most likely because the phone number was non-existent.
    'no-answer' => t('No Answer'),     //The call ended without being answered.
    'canceled' => t('Canceled'),       //The call was canceled via the REST API while queued or ringing.
  );
}

function twilio_dial_call_status_options_list() {
  return array(
    'completed' => t('Completed'), //The called party answered the call and was connected to the caller.
    'answered' => t('Answered'), //The called party answered the call and was connected to the caller, returned when dialing a conference.
    'busy' => t('Busy'), //Twilio received a busy signal when trying to connect to the called party.
    'no-answer' => t('No Answer'), //The called party did not pick up before the timeout period passed.
    'failed' => t('Failed'), //Twilio was unable to route to the given phone number. This is frequently caused by dialing a properly formatted but non-existent phone number.
    'canceled' => t('Canceled'), //The call was canceled via the REST API before it was answered.
  );
}

function twilio_sms_status_options_list() {
  return array(
    'sending' => t('Sending'),
    'sent' => t('Sent'),
    'invalid' => t('Invalid'),
    'failed' => t('Failed'),
  );
}

function twilio_queue_result_options_list() {
  return array(
    'bridged' => t('Bridged'), //The call was dequeued and bridged to the dequeuer.
    'bridging-in-process' => t('Bridging In Process'), //Twilio has been instructed to bridge the enqueued party.
    'error' => t('Error'), //The TwiML contained an error, either in the <Enqueue> verb itself or in the TwiML retrieved from a waitUrl. Check the App Monitor.
    'hangup' => t('Hangup'), //The enqueued caller hung up before connecting to a dequeued call.
    'leave' => t('Leave'), //The enqueued caller exited the queue via the <Leave> verb.
    'redirected' => t('Redirected'), //While in the queue, the call was redirected out of the queue, typically by a REST API request.
    'redirected-from-bridged' => t('Redirected From Bridged'), //The queued and then successfully bridged session was transferred out.
    'queue-full' => t('Queue Full'), //The targeted queue was full, thus the enqueue attempt was rejected.
    'system-error' => t('System Error'), //The Twilio system malfunctioned during the enqueue process.
  );
}

/**
 * Action: Send an SMS to a user.
 */
function twilio_rules_action_send_sms_to_user($account, $message, $media) {
  if (!empty($account->twilio_user['number']) && $account->twilio_user['status'] == 2) {
    twilio_send($account->twilio_user['number'], $message, $account->twilio_user['country'], $media);
  }
}

/**
 * Action: Send an SMS to all users.
 */
function twilio_rules_action_send_sms_to_all_users($message, $media) {
  // Fetch all site users with confirmed numbers.
  $results = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAll();
  // If we have results, iterate through and send the message.
  if (!empty($results)) {
    foreach ($results as $result) {
      twilio_send($result->number, $message, $result->country, $media);
    }
  }
}

/**
 * Action: Send an SMS to a number.
 */
function twilio_rules_action_send_sms_to_number($country, $number, $message, $media) {
  twilio_send($number, $message, $country, $media);
}

/**
 * Condition: Validate if a number belongs to a user on the site.
 */
function twilio_rules_condition_number_belongs_to_user($number) {
  return twilio_verify_number($number);
}

/**
 * Condition: Validate if the user has a verified number.
 */
function twilio_rules_condition_user_has_verified_number($user) {
  // Check if the user has TWILIO_USER_CONFIRMED status.
  if (!empty($user->twilio_user) && $user->twilio_user['status'] == TWILIO_USER_CONFIRMED) {
    return TRUE;
  }
  return FALSE;
}
