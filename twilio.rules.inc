<?php
/**
 * @file
 * Rules module integration
 */

/**
 * Implements hook_rules_data_info().
 */
function twilio_rules_data_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
    'wrap' => TRUE,
  );
  return array(
    'twilio_sms_request' => $defaults + array(
      'label' => t('Twilio incoming SMS'),
      'property info' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Number'),
          'description' => t('The phone number of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'number_twilio' => array(
          'type' => 'text',
          'label' => t('Twilio Number'),
          'description' => t('The Twilio phone number that receieved the message.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
          'description' => t('The message of the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
        'media' => array(
          'type' => 'text',
          'label' => t('Media'),
          'description' => t('The media attached to the incoming SMS.'),
          'getter callback' => 'entity_property_verbatim_get',
          'setter callback' => 'entity_property_verbatim_set',
        ),
      ),
    ),
    'twilio_voice_request' => $defaults + array(
      'label' => t('Twilio Incoming Voice request'),
      'property info' => array(
        'call_sid' => array(
          'type' => 'text',
          'label' => t('Call SID'),
          'description' => t('A unique identifier for this call, generated by Twilio.'),
        ),
        'account_sid' => array(
          'type' => 'text',
          'label' => t('Account SID'),
          'description' => t('The Twilio account id. It is 34 characters long, and always starts with the letters AC.'),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t('The phone number or client identifier of the party that initiated the call.'),
        ),
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
          'description' => t('The phone number or client identifier of the called party.'),
        ),
        'call_status' => array(
          'type' => 'text',
          'label' => t('Call Status'),
          'description' => t('A descriptive status for the call'),
          'options list' => 'twilio_call_status_options_list',
        ),
        'api_version' => array(
          'type' => 'text',
          'label' => t('API Version'),
          'description' => t('The version of the Twilio API used to handle this call.'),
        ),
        'direction' => array(
          'type' => 'text',
          'label' => t('Direction'),
          'description' => t('A string describing the direction of the call.'),
        ),
        'forwarded_from' => array(
          'type' => 'text',
          'label' => t('Forwarded From'),
          'description' => t('This parameter is set only when Twilio receives a forwarded call, but its value depends on the caller\'s carrier including information when forwarding.'),
        ),
        'caller_name' => array(
          'type' => 'text',
          'label' => t('Caller Name'),
          'description' => t('The caller name from CNAM database.'),
        ),
        'from_city' => array(
            'type' => 'text',
            'label' => t('From City'),
            'description' => t('The city of the caller.'),
        ),
        'from_state' => array(
            'type' => 'text',
            'label' => t('From State'),
            'description' => t('The state or province of the caller.'),
        ),
        'from_zip' => array(
            'type' => 'text',
            'label' => t('From Zip'),
            'description' => t('The postal code of the caller.'),
        ),
        'from_country' => array(
            'type' => 'text',
            'label' => t('From Country'),
            'description' => t('The country of the caller.'),
        ),
        'to_city' => array(
            'type' => 'text',
            'label' => t('To City'),
            'description' => t('The city of the called party.'),
        ),
        'to_state' => array(
            'type' => 'text',
            'label' => t('To State'),
            'description' => t('The state or province of the called party.'),
        ),
        'to_zip' => array(
            'type' => 'text',
            'label' => t('To Zip'),
            'description' => t('The postal code of the called party.'),
        ),
        'to_country' => array(
            'type' => 'text',
            'label' => t('To Country'),
            'description' => t('The country of the called party.'),
        ),
      ),
    ),
    'twilio_gather_request' => $defaults + array(
      'label' => t('Twilio Gather request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'digits' => array(
          'type' => 'text',
          'label' => t('Digits'),
          'description' => t('The digits the caller pressed, excluding the finishOnKey digit if used.'),
        ),
      ),
    ),
    'twilio_record_request' => $defaults + array(
      'label' => t('Twilio Record request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'recording_duration' => array(
          'type' => 'integer',
          'label' => t('Recording Duration'),
          'description' => t('The duration of the recorded audio (in seconds).'),
        ),
        'digits' => array(
          'type' => 'text',
          'label' => t('Digits'),
          'description' => t('The key (if any) pressed to end the recording or \'hangup\' if the caller hung up'),
        ),
      ),
    ),
    'twilio_queue_result_request' => $defaults + array(
      'label' => t('Twilio Queue Result request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'queue_result' => array(
          'type' => 'text',
          'label' => t('Queue Result'),
          'description' => t('The final result of the enqueued call.'),
          'options list' => 'twilio_queue_result_options_list',
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'queue_time' => array(
          'type' => 'integer',
          'label' => t('Queue Time'),
          'description' => t('The time the call spent in the queue.'),
        ),
      ),
    ),
    'twilio_queue_wait_request' => $defaults + array(
      'label' => t('Twilio Queue Wait request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'queue_position' => array(
          'type' => 'integer',
          'label' => t('Queue Position'),
          'description' => t('The current queue position for the enqueued call.'),
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'queue_time' => array(
          'type' => 'integer',
          'label' => t('Queue Time'),
          'description' => t('The time the call spent in the queue.'),
        ),
        'avg_queue_time' => array(
          'type' => 'integer',
          'label' => t('Average Queue Time'),
          'description' => t('An average of how long time the current enqueued callers has been in the queue.'),
        ),
        'current_queue_size' => array(
          'type' => 'integer',
          'label' => t('Current Queue Size'),
          'description' => t('The current number of enqueued calls in this queue.'),
        ),
      ),
    ),
    'twilio_call_status_request' => $defaults + array(
      'label' => t('Twilio Call Status request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'call_duration' => array(
          'type' => 'integer',
          'label' => t('Call Duration'),
          'description' => t('The duration in seconds of the just-completed call.'),
        ),
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'recording_sid' => array(
          'type' => 'text',
          'label' => t('Recording SID'),
          'description' => t('The unique id of the Recording from this call.'),
        ),
        'recording_duration' => array(
          'type' => 'integer',
          'label' => t('Recording Duration'),
          'description' => t('The duration of the recorded audio (in seconds).'),
        ),
      ),
    ),
    'twilio_dial_call_status_request' => $defaults + array(
      'label' => t('Twilio Dial Call Status request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'dial_call_status' => array(
          'type' => 'text',
          'label' => t('Dial Call Status'),
          'description' => t('The outcome of the <Dial> attempt.'),
        ),
        'dial_call_sid' => array(
          'type' => 'text',
          'label' => t('Dial Call SID'),
          'description' => t('The call sid of the new call leg.'),
        ),
        'dial_call_duration' => array(
          'type' => 'integer',
          'label' => t('Dial Call Duration'),
          'description' => t('The duration in seconds of the dialed call.'),
        ),
        'recording_url' => array(
          'type' => 'uri',
          'label' => t('Recording URL'),
          'description' => t('The URL of the recorded audio.'),
        ),
        'queue_sid' => array(
          'type' => 'text',
          'label' => t('Queue SID'),
          'description' => t('The SID of the queue.'),
        ),
        'dequeue_result' => array(
          'text' => 'text',
          'label' => t('Dequeue Result'),
          'description' => t('One of invalid, bridged, queue-not-found, queue-empty or failed.'),
        ),
        'dequeued_call_sid' => array(
          'type' => 'text',
          'label' => t('Dequeued Call SID'),
          'description' => t('The CallSid of the dequeued call.'),
        ),
        'dequeued_call_queue_time' => array(
          'type' => 'integer',
          'label' => t('Dequeued Call Queue Time'),
          'description' => t('The time the dequeued call spent waiting in the queue.'),
        ),
        'dequeued_call_duration' => array(
          'type' => 'integer',
          'label' => t('Dequeued Call Duration'),
          'description' => t('The time the call was bridged with the dequeued call.'),
        ),
      ),
    ),
    'twilio_sms_status_request' => $defaults + array(
      'label' => t('Twilio SMS Status request'),
      'parent' => 'twilio_voice_request',
      'property info' => array(
        'sms_sid' => array(
          'type' => 'text',
          'label' => t('SMS SID'),
          'description' => t('The SID Twilio has assigned for the SMS message.'),
        ),
        'sms_status' => array(
          'type' => 'text',
          'label' => t('SMS Status'),
          'description' => t('The current status of the SMS message. '),
          'options list' => 'twilio_sms_status_options_list',
        ),
      ),
    ),
    'twilio_twiml_response' => $defaults + array(
      'label' => t('Twiml Response'),
    ),
    'twilio_twiml_dial_response' => $defaults + array(
      'label' => t('Twiml Dial Response'),
      'parent' => 'twilio_twiml_response',
    ),
    'twilio_twiml_gather_response' => $defaults + array(
      'label' => t('Twiml Gather Response'),
      'parent' => 'twilio_twiml_response',
    ),
  );
}

/**
 * Implements hook_event_info().
 */
function twilio_rules_event_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  return array(
    'twilio_sms_incoming' => $defaults + array(
      'label' => t('Drupal receives an SMS'),
      'variables' => array(
        'sms' => array(
          'type' => 'sms',
          'label' => t('Twilio incoming SMS'),
        ),
      ),
    ),
    'twilio_voice_incoming' => $defaults + array(
      'label' => t('Drupal receives a voice call'),
      'variables' => array(
        'voice_request' => array(
          'type' => 'twilio_voice_request',
          'label' => t('Twilio Voice Request'),
        ),
        'twiml_response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_condition_info().
 */
function twilio_rules_condition_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
  );
  return array(
    'twilio_rules_condition_number_belongs_to_user' => $defaults + array(
      'label' => t('Number belongs to a valid user'),
      'arguments' => array(
        'number' => array(
          'type' => 'text',
          'label' => t('Phone Number'),
        ),
      ),
    ),
    'twilio_rules_condition_user_has_verified_number' => $defaults + array(
      'label' => t('User has a verified number'),
      'arguments' => array(
        'account' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 */
function twilio_rules_action_info() {
  $defaults = array(
    'group' => t('Twilio'),
    'module' => 'twilio',
    'named parameter' => TRUE,
  );
  return array(
    'twilio_send_sms_to_user' => $defaults + array(
      'label' => t('Send an SMS to a user'),
      'base' => 'twilio_rules_action_send_sms_to_user',
      'parameter' => array(
        'account' => array(
          'type' => 'user',
          'label' => t('User'),
          'save' => TRUE,
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
        ),
        'media' => array(
          'type' => 'text',
          'optional' => TRUE,
          'label' => t('Media path'),
        ),
      ),
    ),
    'twilio_send_sms_to_all_users' => $defaults + array(
      'label' => t('Send an SMS to all users'),
      'base' => 'twilio_rules_action_send_sms_to_all_users',
      'parameter' => array(
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
        ),
        'media' => array(
          'type' => 'text',
          'optional' => TRUE,
          'label' => t('Media path'),
        ),
      ),
    ),
    'twilio_send_sms_to_number' => $defaults + array(
      'label' => t('Send an SMS to a number'),
      'base' => 'twilio_rules_action_send_sms_to_number',
      'parameter' => array(
        'country' => array(
          'type' => 'text',
          'label' => t('Country code'),
          'options list' => 'twilio_country_codes',
        ),
        'number' => array(
          'type' => 'text',
          'label' => t('Number'),
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
        ),
        'media' => array(
          'type' => 'text',
          'optional' => TRUE,
          'label' => t('Media path'),
        ),
      ),
    ),
    'twilio_load_rule_component' => $defaults + array(
      'label' => t('Load Twilio Rule Component'),
      'base' => 'twilio_rules_load_rule_component',
      'parameter' => array(
        'rule_component' => array(
          'type' => 'text',
          'label' => t('Rule Component'),
          'options list' => 'twilio_rules_component_options_list',
        ),
      ),
      'provides' => array(
        'twilio_component_uri' => array(
          'type' => 'uri',
          'label' => t('Twilio Component URI'),
        ),
      ),
    ),
    'twilio_twiml_dial' => $defaults + array(
      'label' => t('Twiml Verb: Dial'),
      'base' => 'twilio_rules_twiml_dial',
      'parameter' => array(
        'action' => array(
          'type' => 'uri',
          'label' => t('Action'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
          'default value' => NULL,
          'allow null' => TRUE,
        ),
        'timeout' => array(
          'type' => 'integer',
          'label' => t('Timeout'),
          'optional' => TRUE,
        ),
        'hangup_on_star' => array(
          'type' => 'boolean',
          'label' => t('Hangup on Star'),
          'optional' => TRUE,
        ),
        'time_limit' => array(
          'type' => 'integer',
          'label' => t('Time Limit'),
          'optional' => TRUE,
        ),
        'caller_id' => array(
          'type' => 'text',
          'label' => t('Caller ID'),
          'optional' => TRUE,
        ),
        'record' => array(
          'type' => 'text',
          'label' => t('Record'),
          'optional' => TRUE,
          'options list' => 'twilio_record_options_list',
        ),
        'trim' => array(
          'type' => 'boolean',
          'label' => t('Trim'),
          'optional' => TRUE,
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
      'provides' => array(
        'dial_response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Dial Response'),
        )
      ),
    ),
    'twilio_twiml_client' => $defaults + array(
      'label' => t('Twiml Noun: Client'),
      'base' => 'twilio_rules_twiml_client',
      'parameter' => array(
        'url' => array(
          'type' => 'uri',
          'label' => t('URL'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,

          'options list' => 'twilio_method_options_list',
        ),
        'status_callback_event' => array(
          'type' => 'list<text>',
          'label' => t('Status Callback Event'),
          'optional' => TRUE,
          'options list' => 'twilio_status_callback_options_list',
        ),
        'status_callback' => array(
          'type' => 'uri',
          'label' => t('Status Callback'),
          'optional' => TRUE,
        ),
        'status_callback_method' => array(
          'type' => 'text',
          'label' => t('Status Callback Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'client_id' => array(
          'type' => 'text',
          'label' => t('Client ID'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Twiml Dial Response'),
        ),
      ),
    ),
    'twilio_twiml_conference' => $defaults + array(
      'label' => t('Twiml Noun: Conference'),
      'base' => 'twilio_rules_twiml_conference',
      'parameter' => array(
        'muted' => array(
          'type' => 'boolean',
          'label' => t('Muted'),
          'optional' => TRUE,
        ),
        'beep' => array(
          'type' => 'boolean',
          'label' => t('Beep'),
          'optional' => TRUE,
        ),
        'start_conference_on_enter' => array(
          'type' => 'boolean',
          'label' => t('Start Conference On Enter'),
          'optional' => TRUE,
        ),
        'end_conference_on_exit' => array(
          'type' => 'boolean',
          'label' => t('End Conference On Exit'),
          'optional' => TRUE,
        ),
        'wait_url' => array(
          'type' => 'uri',
          'label' => t('Wait Url'),
          'optional' => TRUE,
        ),
        'wait_method' => array(
          'type' => 'text',
          'label' => t('Wait Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'max_participants' => array(
          'type' => 'integer',
          'label' => t('Max Participants'),
          'optional' => TRUE,
        ),
        'record' => array(
          'type' => 'text',
          'label' => t('Record'),
          'optional' => TRUE,
          'options list' => 'twilio_record_options_list',
        ),
        'trim' => array(
          'type' => 'boolean',
          'label' => t('Trim'),
          'optional' => TRUE,
        ),
        'status_callback_event' => array(
          'type' => 'list<text>',
          'label' => t('Status Callback Event'),
          'optional' => TRUE,
          'options list' => 'twilio_status_callback_options_list',
        ),
        'status_callback' => array(
          'type' => 'uri',
          'label' => t('Status Callback'),
          'optional' => TRUE,
        ),
        'status_callback_method' => array(
          'type' => 'text',
          'label' => t('Status Callback Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'event_callback_url' => array(
          'type' => 'uri',
          'label' => t('Event Callback URL'),
          'optional' => TRUE,
        ),
        'conference_name' => array(
          'type' => 'text',
          'label' => t('Conference Name'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Twiml Dial Response'),
        ),
      ),
    ),
    'twilio_twiml_number' => $defaults + array(
      'label' => t('Twiml Noun: Number'),
      'base' => 'twilio_rules_twiml_number',
      'parameter' => array(
        'send_digits' => array(
          'type' => 'text',
          'label' => t('Send Digits'),
        ),
        'url' => array(
          'type' => 'uri',
          'label' => t('URL'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,

          'options list' => 'twilio_method_options_list',
        ),
        'status_callback_event' => array(
          'type' => 'list<text>',
          'label' => t('Status Callback Event'),
          'optional' => TRUE,
          'options list' => 'twilio_status_callback_options_list',
        ),
        'status_callback' => array(
          'type' => 'uri',
          'label' => t('Status Callback'),
          'optional' => TRUE,
        ),
        'status_callback_method' => array(
          'type' => 'text',
          'label' => t('Status Callback Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'number' => array(
          'type' => 'text',
          'label' => t('Number'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Twiml Dial Response'),
        ),
      ),
    ),
    'twilio_twiml_queue' => $defaults + array(
      'label' => t('Twiml Noun: Queue'),
      'base' => 'twilio_rules_twiml_queue',
      'parameter' => array(
        'url' => array(
          'type' => 'uri',
          'label' => t('URL'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'reservation_sid' => array(
          'type' => 'text',
          'label' => t('Reservation SID'),
          'optional' => TRUE,
        ),
        'post_work_activity_sid' => array(
          'type' => 'text',
          'label' => t('Post Work Activity SID'),
          'optional' => TRUE,
        ),
        'queue_name' => array(
          'type' => 'text',
          'label' => t('Queue Name'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Twiml Dial Response'),
        ),
      ),
    ),
    'twilio_twiml_sip' => $defaults + array(
      'label' => t('Twiml Noun: Sip'),
      'base' => 'twilio_rules_twiml_sip',
      'parameter' => array(
        'url' => array(
          'type' => 'uri',
          'label' => t('URL'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'status_callback_event' => array(
          'type' => 'list<text>',
          'label' => t('Status Callback Event'),
          'optional' => TRUE,
          'options list' => 'twilio_status_callback_options_list',
        ),
        'status_callback' => array(
          'type' => 'uri',
          'label' => t('Status Callback'),
          'optional' => TRUE,
        ),
        'status_callback_method' => array(
          'type' => 'text',
          'label' => t('Status Callback Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'address' => array(
          'type' => 'text',
          'label' => t('Address'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_dial_response',
          'label' => t('Twiml Dial Response'),
        ),
      ),
    ),
    'twilio_twiml_enqueue' => $defaults + array(
      'label' => t('Twiml Verb: Enqueue'),
      'base' => 'twilio_rules_twiml_enqueue',
      'parameter' => array(
        'action' => array(
          'type' => 'uri',
          'label' => t('Action'),
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'wait_url' => array(
          'type' => 'uri',
          'label' => t('WaitUrl'),
          'optional' => TRUE,
        ),
        'wait_url_method' => array(
          'type' => 'text',
          'label' => t('WaitUrlMethod'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'workflow_sid' => array(
          'type' => 'text',
          'label' => t('workflowSid'),
          'optional' => TRUE,
        ),
        'queue_name' => array(
          'type' => 'text',
          'label' => t('Queue Name'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_gather' => $defaults + array(
      'label' => t('Twiml Verb: Gather'),
      'base' => 'twilio_rules_twiml_gather',
      'parameter' => array(
        'action' => array(
          'type' => 'uri',
          'label' => t('Action'),
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'timeout' => array(
          'type' => 'integer',
          'label' => t('Timeout'),
          'optional' => TRUE,
        ),
        'finish_on_key' => array(
          'type' => 'text',
          'label' => t('Finish on Key'),
          'optional' => TRUE,
        ),
        'num_digits' => array(
          'type' => 'integer',
          'label' => t('Number of Digits'),
          'optional' => TRUE,
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
      'provides' => array(
        'gather_response' => array(
          'type' => 'twilio_twiml_gather_response',
          'label' => t('Gather Response'),
        ),
      ),
    ),
    'twilio_twiml_hangup' => $defaults + array(
      'label' => t('Twiml Verb: Hangup'),
      'base' => 'twilio_rules_twiml_hangup',
      'parameter' => array(
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_leave' => $defaults + array(
      'label' => t('Twiml Verb: Leave'),
      'base' => 'twilio_rules_twiml_leave',
      'parameter' => array(
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_pause' => $defaults + array(
      'label' => t('Twiml Verb: Pause'),
      'base' => 'twilio_rules_twiml_pause',
      'parameter' => array(
        'length' => array(
          'type' => 'integer',
          'label' => t('Length'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_play' => $defaults + array(
      'label' => t('Twiml Verb: Play'),
      'base' => 'twilio_rules_twiml_play',
      'parameter' => array(
        'loop' => array(
          'type' => 'integer',
          'label' => t('Loop'),
          'optional' => TRUE,
        ),
        'digits' => array(
          'type' => 'text',
          'label' => t('Digits'),
          'optional' => TRUE,
        ),
        'url' => array(
          'type' => 'uri',
          'label' => t('URL'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_record' => $defaults + array(
      'label' => t('Twiml Verb: Record'),
      'base' => 'twilio_rules_twiml_record',
      'parameter' => array(
        'action' => array(
          'type' => 'uri',
          'label' => t('Action'),
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'timeout' => array(
          'type' => 'integer',
          'label' => t('Timeout'),
          'optional' => TRUE,
        ),
        'finish_on_key' => array(
          'type' => 'text',
          'label' => t('Finish on Key'),
          'optional' => TRUE,
        ),
        'max_length' => array(
          'type' => 'integer',
          'label' => t('Maximum Length'),
          'optional' => TRUE,
        ),
        'transcribe' => array(
          'type' => 'boolean',
          'label' => t('Transcribe'),
          'optional' => TRUE,
        ),
        'transcribe_callback' => array(
          'type' => 'uri',
          'label' => t('Transcribe Callback'),
          'optional' => TRUE,
        ),
        'play_beep' => array(
          'type' => 'boolean',
          'label' => t('Play Beep'),
          'optional' => TRUE,
        ),
        'trim' => array(
          'type' => 'boolean',
          'label' => t('Trim'),
          'optional' => TRUE,
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_redirect' => $defaults + array(
      'label' => t('Twiml Verb: Redirect'),
      'base' => 'twilio_rules_twiml_enqueue',
      'parameter' => array(
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'options list' => 'twilio_method_options_list',
        ),
        'destination' => array(
          'type' => 'uri',
          'label' => t('Destination'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_reject' => $defaults + array(
      'label' => t('Twiml Verb: Reject'),
      'base' => 'twilio_rules_twiml_reject',
      'parameter' => array(
        'reason' => array(
          'type' => 'text',
          'label' => t('Reason'),
          'optional' => TRUE,
          'options list' => 'twilio_reason_options_list',
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_say' => $defaults + array(
      'label' => t('Twiml Verb: Say'),
      'base' => 'twilio_rules_twiml_say',
      'parameter' => array(
        'voice' => array(
          'type' => 'text',
          'label' => t('Voice'),
          'optional' => TRUE,
          'options list' => 'twilio_voice_options_list',
        ),
        'loop' => array(
          'type' => 'integer',
          'label' => t('Loop'),
          'optional' => TRUE,
        ),
        'language' => array(
          'type' => 'text',
          'label' => t('Language'),
          'optional' => TRUE,
          'options list' => 'twilio_language_options_list',
        ),
        'text' => array(
          'type' => 'text',
          'label' => t('Text'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
    'twilio_twiml_sms' => $defaults + array(
      'label' => t('Twiml Verb: SMS'),
      'base' => 'twilio_rules_twiml_sms',
      'parameter' => array(
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
        ),
        'action' => array(
          'type' => 'uri',
          'label' => t('Action'),
          'optional' => TRUE,
        ),
        'method' => array(
          'type' => 'text',
          'label' => t('Method'),
          'optional' => TRUE,
          'options list' => 'twilio_method_options_list',
        ),
        'status_callback' => array(
          'type' => 'uri',
          'label' => t('StatusCallback'),
          'optional' => TRUE,
        ),
        'message' => array(
          'type' => 'text',
          'label' => t('Message'),
        ),
        'response' => array(
          'type' => 'twilio_twiml_response',
          'label' => t('Twiml Response'),
        ),
      ),
    ),
  );
}

/**
 * Action: Send an SMS to a user.
 */
function twilio_rules_action_send_sms_to_user($account, $message, $media) {
  if (!empty($account->twilio_user['number']) && $account->twilio_user['status'] == 2) {
    twilio_send($account->twilio_user['number'], $message, $account->twilio_user['country'], $media);
  }
}

/**
 * Action: Send an SMS to all users.
 */
function twilio_rules_action_send_sms_to_all_users($message, $media) {
  // Fetch all site users with confirmed numbers.
  $results = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAll();
  // If we have results, iterate through and send the message.
  if (!empty($results)) {
    foreach ($results as $result) {
      twilio_send($result->number, $message, $result->country, $media);
    }
  }
}

/**
 * Action: Send an SMS to a number.
 */
function twilio_rules_action_send_sms_to_number($country, $number, $message, $media) {
  twilio_send($number, $message, $country, $media);
}

function twilio_rules_load_rule_component($parameters) {
  return array('twilio_component_uri' => url('twilio/voice/' . $parameters['rule_component'], array('absolute' => TRUE)));
}

function twilio_rules_twiml_dial($parameters) {
  $options = twilio_map_options($parameters, array(
    'action' => 'action',
    'method' => 'method',
    'timeout' => 'timeout',
    'hangupOnStar' => 'hangup_on_star',
    'timeLimit' => 'time_limit',
    'callerId' => 'callerId',
    'record' => 'record',
    'trim' => 'trim',
  ));
  $dial_response = $parameters['response']->dial(NULL, $options);

  return array('dial_response' => $dial_response);
}

function twilio_rules_twiml_client($parameters) {
  $options = twilio_map_options($parameters, array(
    'url' => 'url',
    'method' => 'method',
    'statusCallbackEvent' => 'status_callback_event',
    'statusCallback' => 'status_callback',
    'statusCallbackMethod' => 'status_callback_method',
  ));
  $parameters['response']->client($parameters['client_id'], $options);
}

function twilio_rules_twiml_conference($parameters) {
  $options = twilio_map_options($parameters, array(
    'muted' => 'muted',
    'beep' => 'beep',
    'startConferenceOnEnter' => 'start_conference_on_enter',
    'endConferenceOnExit' => 'end_conference_on_exit',
    'waitUrl' => 'wait_url',
    'waitMethod' => 'wait_method',
    'maxParticipants' => 'max_participants',
    'record' => 'record',
    'trim' => 'trim',
    'statusCallbackEvent' => 'status_callback_event',
    'statusCallback' => 'status_callback',
    'statusCallbackMethod' => 'status_callback_method',
    'eventCallbackUrl' => 'event_callback_url',
  ));
  $parameters['response']->conference($parameters['conference_name'], $options);
}

function twilio_rules_twiml_number($parameters) {
  $options = twilio_map_options($parameters, array(
    'sendDigits' => 'send_digits',
    'url' => 'url',
    'method' => 'method',
    'statusCallbackEvent' => 'status_callback_event',
    'statusCallback' => 'status_callback',
    'statusCallbackMethod' => 'status_callback_method',
  ));
  $parameters['response']->number($parameters['number'], $options);
}

function twilio_rules_twiml_queue($parameters) {
  $options = twilio_map_options($parameters, array(
    'url' => 'url',
    'method' => 'method',
    'reservationSid' => 'reservation_sid',
    'postWorkActivitySid' => 'post_work_activity_sid',
  ));
  $parameters['response']->queue($parameters['queue_name'], $options);
}

function twilio_rules_twiml_sip($parameters) {
  $options = twilio_map_options($parameters, array(
    'url' => 'url',
    'method' => 'method',
    'statusCallbackEvent' => 'status_callback_event',
    'statusCallback' => 'status_callback',
    'statusCallbackMethod' => 'status_callback_method',
  ));
  $parameters['response']->sip($parameters['address'], $options);
}

function twilio_rules_twiml_enqueue($parameters) {
  $options = twilio_map_options($parameters, array(
    'action' => 'action',
    'method' => 'method',
    'waitUrl' => 'wait_url',
    'waitUrlMethod' => 'wait_url_method',
    'workflowSid' => 'workflow_sid',
  ));
  $parameters['response']->enqueue($parameters['queue_name'], $options);
}

function twilio_rules_twiml_gather($parameters) {
  $options = twilio_map_options($parameters, array(
    'action' => 'action',
    'method' => 'method',
    'timeout' => 'timeout',
    'finishOnKey' => 'finish_on_key',
    'numDigits' => 'num_digits',
  ));
  $gather_response = $parameters['response']->gather($options);

  return array('gather_response' => $gather_response);
}

function twilio_rules_twiml_hangup($parameters) {
  $parameters['response']->hangup();
}

function twilio_rules_twiml_leave($parameters) {
  $parameters['response']->leave();
}

function twilio_rules_twiml_pause($parameters) {
  $options = twilio_map_options($parameters, array(
    'length' => 'length',
  ));
  $parameters['response']->pause($options);
}

function twilio_rules_twiml_play($parameters) {
  $options = twilio_map_options($parameters, array(
    'loop' => 'loop',
    'digits' => 'digits',
  ));
  $parameters['response']->play($parameters['url'], $options);
}

function twilio_rules_twiml_record($parameters) {
  $options = twilio_map_options($parameters, array(
    'action' => 'action',
    'method' => 'method',
    'timeout' => 'timeout',
    'finishOnKey' => 'finish_on_key',
    'maxLength' => 'max_length',
    'transcribe' => 'transcribe',
    'transcribeCallback' => 'transcribe_callback',
    'playBeep' => 'play_beep',
    'trim' => 'trim',
  ));
  $parameters['response']->record($options);
}

function twilio_rules_twiml_redirect($parameters) {
  $options = twilio_map_options($parameters, array(
    'method' => 'method',
  ));
  $parameters['response']->redirect($parameters['destination'], $options);
}

function twilio_rules_twiml_reject($parameters) {
  $options = twilio_map_options($parameters, array(
    'reason' => 'reason',
  ));
  $parameters['response']->reject($options);
}

function twilio_rules_twiml_say($parameters) {
  $options = twilio_map_options($parameters, array(
    'voice' => 'voice',
    'loop' => 'loop',
    'language' => 'language',
  ));
  $parameters['response']->say($parameters['text'], $options);
}

function twilio_rules_twiml_sms($parameters) {
  $options = twilio_map_options($parameters, array(
    'to' => 'to',
    'from' => 'from',
    'action' => 'action',
    'method' => 'method',
    'statusCallback' => 'status_callback',
  ));
  $parameters['response']->sms($parameters['message'], $options);
}

/**
 * Condition: Validate if a number belongs to a user on the site.
 */
function twilio_rules_condition_number_belongs_to_user($number) {
  return twilio_verify_number($number);
}

/**
 * Condition: Validate if the user has a verified number.
 */
function twilio_rules_condition_user_has_verified_number($user) {
  // Check if the user has TWILIO_USER_CONFIRMED status.
  if (!empty($user->twilio_user) && $user->twilio_user['status'] == TWILIO_USER_CONFIRMED) {
    return TRUE;
  }
  return FALSE;
}
