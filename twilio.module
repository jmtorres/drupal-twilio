<?php

/**
 * @file
 * Twilio module
 */

/**
 * Define constants for twilio
 */
define('TWILIO_LIBRARY', 'twilio');
define('TWILIO_USER_PENDING', 1);
define('TWILIO_USER_CONFIRMED', 2);
define('TWILIO_USER_MAX_CHARS', 140);
define('TWILIO_API_VERSION', '2010-04-01');
define('TWILIO_ADMIN_PATH', 'admin/config/system/twilio');
define('TWILIO_SMS_LONG_MULTIPLE', 0);
define('TWILIO_SMS_LONG_TRUNCATE', 1);
define('TWILIO_DEFAULT_COUNTRY_CODE', 1);

/**
 * Load module include files.
 */
module_load_include('inc', 'twilio', 'twilio.user');
module_load_include('inc', 'twilio', 'twilio.codes');
module_load_include('inc', 'twilio', 'twilio.options_lists');
module_load_include('inc', 'twilio', 'twilio.actions');

/**
 * Implements hook_menu().
 */
function twilio_menu() {
  $items[TWILIO_ADMIN_PATH] = array(
    'title' => 'Twilio',
    'description' => 'Administer your twilio settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_form'),
    'access arguments' => array('administer twilio'),
    'file' => 'twilio.admin.inc',
  );
  $items[TWILIO_ADMIN_PATH . '/settings'] = array(
    'title' => 'Twilio Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[TWILIO_ADMIN_PATH . '/test'] = array(
    'title' => 'Send Test SMS message',
    'description' => 'Test your Twilio SMS functionality',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_test_form'),
    'access arguments' => array('administer twilio'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['twilio/sms'] = array(
    'page callback' => 'twilio_receive_message',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['twilio/voice'] = array(
    'page callback' => 'twilio_receive_voice',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  if (module_exists('rules')) {
    $rule_component_menu_defaults = array(
      'page callback' => 'twilio_request_callback',
      'delivery callback' => 'twilio_deliver_twiml_response',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    $items['twilio/message_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('message_callback', 2, 'twilio_message_request', TRUE),
    );
    $items['twilio/message_status_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('message_callback', 2, 'twilio_message_status_request', TRUE),
    );
    $items['twilio/voice_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_voice_request', TRUE),
    );
    $items['twilio/gather_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_gather_request', TRUE),
    );
    $items['twilio/record_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_record_request', TRUE),
    );
    $items['twilio/queue_result_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_queue_result_request', TRUE),
    );
    $items['twilio/queues_wait_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_queue_wait_request', TRUE),
    );
    $items['twilio/call_status_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_call_status_request'),
    );
    $items['twilio/dial_call_status_component/%rules_config'] = $rule_component_menu_defaults + array(
      'page arguments' => array('voice_callback', 2, 'twilio_dial_call_status_request', TRUE),
    );
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function twilio_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/twilio']['page callback'] = 'twilio_user_settings';
  $callbacks['user/%user_category/edit/twilio']['module'] = 'twilio';
  $callbacks['user/%user_category/edit/twilio']['page arguments'] = array(1);
  $callbacks['user/%user_category/edit/twilio']['file'] = 'twilio.pages.inc';
  $callbacks['user/%user_category/edit/twilio']['access callback'] = array('twilio_edit_access');
}

/**
 * Implements hook_permission().
 */
function twilio_permission() {
  return array(
    'edit own sms number' => array(
      'title' => t('Edit own number'),
      'description' => t('Edit your own phone number'),
    ),
    'administer twilio' => array(
      'title' => t('Administer Twilio'),
      'description' => t('Administer Twilio confguration'),
    ),
  );
}

/**
 * Access callback for twilio account editing.
 */
function twilio_edit_access($account) {
  return user_edit_access($account) && user_access('edit own sms number');
}

/**
 * Implements hook_libraries_info().
 */
function twilio_libraries_info() {
  $libraries['twilio'] = array(
    'name' => 'Twilio library',
    'vendor url' => 'http://www.twilio.com',
    'download url' => 'https://github.com/twilio/twilio-php/tarball/latest',
    'path' => 'Services',
    'version' => TWILIO_API_VERSION,
    'files' => array(
      'php' => array(
        'Twilio.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Sends a message via Twilio.
 *
 * @param string $number
 *   The phone number of the recipient
 *
 * @param string $message
 *   The message to send to the recipient
 *
 * @param string $country
 *   The country code for the phone number
 *
 * @param string $media
 *   Public facing url to an media file
 *
 * @param array $options
 *   Additonal options (not currently used)
 *
 * @return bool
 *   TRUE or FALSE if the message was successfully sent.
 */
function twilio_send($number, $message, $country = TWILIO_DEFAULT_COUNTRY_CODE, $media = NULL, $options = array()) {
  switch (variable_get('twilio_long_sms', TWILIO_SMS_LONG_MULTIPLE)) {
    case TWILIO_SMS_LONG_TRUNCATE:
      // Truncate the message to 160 characters.
      $message_truncated = substr($message, 0, 160);
      $response = twilio_command('sendmsg', array(
        'country' => $country,
        'number' => $number,
        'message' => $message_truncated,
        'media' => $media,
        'options' => $options,
      ));
      break;

    case TWILIO_SMS_LONG_MULTIPLE:
      // Break up the message into 160 character chunks and send multiple.
      $iterator = ceil(strlen($message) / 160);
      for ($i = 0; $i < $iterator; $i++) {
        $sms = array(
          'country' => $country,
          'number' => $number,
          'message' => substr($message, $i * 160, 160),
          'options' => $options,
        );
        // Attach the media array only to the first message.
        if ($i === 0) {
          $sms['media'] = $media;
        }
        $response = twilio_command('sendmsg', $sms);
      }
      break;
  }
  return $response;
}

function twilio_call($parameters) {
  if(twilio_load_libraries()) {
    $twilio_credentials = twilio_get_credentials();
    try {
      $client = new Services_Twilio($twilio_credentials['account_sid'], $twilio_credentials['auth_token']);

      $options = _twilio_map_options($parameters, array(
        'Method' => 'method',
        'FallbackUrl' => 'fallback_url',
        'FallbackMethod' => 'fallback_method',
        'StatusCallback' => 'status_callback',
        'StatusCallbackMethod' => 'status_callback_method',
        'StatusCallbackEvent' => 'status_callback_event',
        'SendDigits' => 'send_digits',
        'Timeout' => 'timeout',
        'Record' => 'record',
      ));

      $response = $client->account->calls->create(
        $parameters['from'],
        $parameters['to'],
        $parameters['url'],
        $options
      );
      dpm(get_defined_vars());
      return $response;
    }
    catch(Services_Twilio_RestException $e){
      dpm($e);
      return FALSE;
    }
  }
  return FALSE;
}

function twilio_message($parameters) {
  if(twilio_load_libraries()) {
    $twilio_credentials = twilio_get_credentials();
    try {
      $client = new Services_Twilio($twilio_credentials['account_sid'], $twilio_credentials['auth_token']);

      $options = _twilio_map_options($parameters, array(
        'To' => 'to',
        'From' => 'from',
        'MessagingServiceSid' => 'messaging_service_sid',
        'Body' => 'body',
        'MediaUrl' => 'media_url',
        'StatusCallback' => 'status_callback',
        'ApplicationSid' => 'application_sid',
        'MaxPrice' => 'max_price',
      ));

      $response = $client->account->messages->create($options);
      dpm(get_defined_vars());
      return $response;
    }
    catch(Services_Twilio_RestException $e){
      dpm($e);
      return FALSE;
    }
  }
  return FALSE;
}

/**
 * Executes a command using the Twilio REST API.
 *
 * @param string $command
 *   The Twilio API command to execute.
 *
 * @param array $data
 *   The array of data and configuration used by some command being executed.
 *
 * @return bool
 *   TRUE if the command executed correctly, FALSE otherwise.
 */
function twilio_command($command = '', $data = array()) {

  // Try to load the library and check if that worked.
  if (twilio_load_libraries()) {
    // Set our account_sid, auth_token, and number.
    $account_sid = !empty($data['options']['twilio_account']) ? $data['options']['twilio_account'] : variable_get('twilio_account', FALSE);
    $auth_token = !empty($data['options']['twilio_token']) ? $data['options']['twilio_token'] : variable_get('twilio_token', FALSE);
    $number = !empty($data['options']['twilio_number']) ? $data['options']['twilio_number'] : variable_get('twilio_number', FALSE);

    // If we don't have one of our twilio variables don't bother doing anything.
    if (!$account_sid || !$auth_token || !$number) {
      return FALSE;
    }

    // Twilio REST API version.
    $api_version = !empty($data['options']['api_version']) ? $data['options']['api_version'] : TWILIO_API_VERSION;

    switch ($api_version) {
      case '2010-04-01':
        switch ($command) {
          case 'sendmsg':
            // Instantiate a new Twilio Rest Client.
            $client = new Services_Twilio($account_sid, $auth_token);
            $sms = array(
              'To' => '+' . $data['country'] . $data['number'],
              'From' => $number,
              'Body' => $data['message'],
            );
            if (!empty($data['media'])) {
              $sms['MediaUrl'] = $data['media'];
            }
            try {
              $response = $client->account->messages->create($sms);
              if (!empty($response->status) && $response->status == 'failed') {
                watchdog('Twilio', 'An unknown error occurred during the HTTP request');
                return FALSE;
              }
              return TRUE;
            }
            catch (Exception $e){
              watchdog('Twilio', $e->getMessage(), array(), WATCHDOG_ERROR);
              $link = l($e->getInfo(), $e->getInfo());
              $message = t('Twilio has returned the error: "@error". For more information visit the following link. !link', array('@error' => $e->getMessage(), '!link' => $link));
              drupal_set_message($message, 'error');
            }
          break;

          case 'validate':
            $validator = new Services_Twilio_RequestValidator($auth_token);
            $signature = $_SERVER["HTTP_X_TWILIO_SIGNATURE"];
            $url = url(request_uri(), array('absolute' => TRUE));
            $post_vars = $_POST;
            if ($validator->validate($signature, $url, $post_vars)) {
              watchdog('Twilio', 'Incoming SMS message validated');
              return TRUE;
            }
            else {
              watchdog('Twilio', 'Incoming SMS could not be validated');
            }
          break;
        }
      break;
    }
  }
  else {
    watchdog('Twilio', 'The twilio library was not loaded properly');
  }
  return FALSE;
}

/**
 * Callback for incoming messages.
 */
function twilio_receive_message() {
  if (!empty($_REQUEST['From']) && !empty($_REQUEST['Body']) && !empty($_REQUEST['ToCountry']) && twilio_validate_request()) {
    $codes = twilio_country_codes();
    $message_code = twilio_get_country_short_codes($_REQUEST['ToCountry']);
    if (empty($codes[$message_code])) {
      watchdog('Twilio', 'A message was blocked from the country @country, due to your currrent country code settings.', array('@country' => $_REQUEST['ToCountry']));
      return;
    }
    $number = check_plain(str_replace('+' . $message_code, '', $_REQUEST['From']));
    $number_twilio = !empty($_REQUEST['To']) ? check_plain(str_replace('+', '', $_REQUEST['To'])) : '';
    $message = check_plain(htmlspecialchars_decode($_REQUEST['Body'], ENT_QUOTES));
    // @todo: Support more than one media entry.
    $media = !empty($_REQUEST['MediaUrl0']) ? $_REQUEST['MediaUrl0'] : '';
    $options = array();
    // Add the receiver to the options array.
    if (!empty($_REQUEST['To'])) {
      $options['receiver'] = check_plain($_REQUEST['To']);
    }
    watchdog('Twilio', 'An SMS message was sent from @number containing the message "@message"', array('@number' => $number, '@message' => $message));
    twilio_sms_incoming($number, $number_twilio, $message, $media, $options);
  }
}

/**
 * Invokes twilio_sms_incoming hook.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @param string $number_twilio
 *   The twilio recipient number.
 *
 * @param string $message
 *   The content of the text message.
 *
 * @param string $media
 *   The absolute media url for a media file attatched to the message.
 */
function twilio_sms_incoming($number, $number_twilio, $message, $media = array(), $options = array()) {
  // Build our SMS array to be used by our hook and rules event.
  $sms = array(
    'number' => $number,
    'number_twilio' => $number_twilio,
    'message' => $message,
    'media' => $media,
  );
  // Invoke a hook for the incoming message so other modules can do things.
  module_invoke_all('twilio_sms_incoming', $sms, $options);
  if (module_exists('rules')) {
    rules_invoke_event('twilio_sms_incoming', $sms);
  }
}

/**
 * Callback for incoming voice calls.
 */
function twilio_receive_voice() {
  if (!empty($_REQUEST['From']) && twilio_validate_request()) {
    $number = check_plain(str_replace('+1', '', $_REQUEST['From']));
    //$number_twilio = !empty($_REQUEST['To']) ? check_plain(str_replace('+', '', $_REQUEST['To'])) : '';

    watchdog('Twilio', 'A voice call from @number was received.', array('@number' => $number));

    $voice_request = twilio_voice_request();
    print twilio_voice_incoming($voice_request);
  }
}

/**
 * Invokes twilio_voice_incoming hook.
 *
 * @param string $voice_request
 *
 * @return Services_Twilio_Twiml
 */
function twilio_voice_incoming($voice_request) {
  $response = new Services_Twilio_Twiml;
  // Invoke a hook for the incoming message so other modules can do things.
  module_invoke_all('twilio_voice_incoming', $voice_request, $response);
  if (module_exists('rules')) {
    rules_invoke_event('twilio_voice_incoming', array(
        'voice_request' => $voice_request,
        'twiml_response' => $response,
    ));
  }
  return $response;
}

function twilio_deliver_twiml_response($page_callback_result) {
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // @todo: Break these up into separate functions?
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        drupal_add_http_header('Status', '404 Not Found');
        watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
        break;

      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');
        watchdog('access denied', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
        break;

      case MENU_SITE_OFFLINE:
        drupal_add_http_header('Status', '503 Service unavailable');
        break;
    }
  }
  elseif (isset($page_callback_result)) {
    // Print anything besides a menu constant, assuming it's not NULL or
    // undefined.
    print $page_callback_result;
  }

  // Perform end-of-request tasks.
  drupal_page_footer();
}

function twilio_message_request() {
  $message_request = _twilio_map_options($_REQUEST, array(
    'message_sid' => 'MessageSid', //A 34 character unique identifier for the message.
    'account_sid' => 'AccountSid', //Your Twilio account id.
    'messaging_service_sid' => 'MessagingServiceSid', //The 34 character id of the Messaging Service associated to the message.
    'from' => 'From', //The phone number or client identifier of the party that initiated the call.
    'to' => 'To', //The phone number or client identifier of the called party.
    'body' => 'Body', //The text body of the message. Up to 1600 characters long.
    'num_media' => 'NumMedia', //The number of media items associated with your message.
    'media_content_type' => 'MediaContentType', //The ContentTypes for the Media stored at MediaUrl
    'media_url' => 'MediaUrl', //A URL referencing the content of the media received in the Message.
    'from_city' => 'FromCity', //The city of the caller.
    'from_state' => 'FromState', //The state or province of the caller.
    'from_zip' => 'FromZip', //The postal code of the caller.
    'from_country' => 'FromCountry', //The country of the caller.
    'to_city' => 'ToCity', //The city of the called party.
    'to_state' => 'ToState', //The state or province of the called party.
    'to_zip' => 'ToZip', //The postal code of the called party.
    'to_country' => 'ToCountry', //The country of the called party.
  ));
  return $message_request;
}

function twilio_message_status_request() {
  $message_status_request = _twilio_map_options($_REQUEST, array(
      'message_status' => 'MessageStatus', //The current status of the message. Either queued, sending, sent, or failed
  ));
  return twilio_message_request() + $message_status_request;
}

function twilio_voice_request() {
  $voice_request = _twilio_map_options($_REQUEST, array(
    'call_sid' => 'CallSid', //A unique identifier for this call, generated by Twilio.
    'account_sid' => 'AccountSid', //Your Twilio account id.
    'from' => 'From', //The phone number or client identifier of the party that initiated the call.
    'to' => 'To', //The phone number or client identifier of the called party.
    'call_status' => 'CallStatus', //A descriptive status for the call.
    'api_version' => 'ApiVersion', //The version of the Twilio API used to handle this call.
    'direction' => 'Direction', //A string describing the direction of the call.
    'forwarded_from' => 'ForwardedFrom',
    'caller_name' => 'CallerName',
    'from_city' => 'FromCity', //The city of the caller.
    'from_state' => 'FromState', //The state or province of the caller.
    'from_zip' => 'FromZip', //The postal code of the caller.
    'from_country' => 'FromCountry', //The country of the caller.
    'to_city' => 'ToCity', //The city of the called party.
    'to_state' => 'ToState', //The state or province of the called party.
    'to_zip' => 'ToZip', //The postal code of the called party.
    'to_country' => 'ToCountry', //The country of the called party.
  ));
  return $voice_request;
}

function twilio_gather_request() {
  $gather_request = _twilio_map_options($_REQUEST, array(
    'digits' => 'Digits',
  ));
  return twilio_voice_request() + $gather_request;
}

function twilio_record_request() {
  $record_request = _twilio_map_options($_REQUEST, array(
    'recording_url' => 'RecordingUrl',
    'recording_duration' => 'RecordingDuration',
    'digits' => 'Digits',
  ));
  return twilio_voice_request() + $record_request;
}

function twilio_queue_result_request() {
  $queue_result_request = _twilio_map_options($_REQUEST, array(
    'queue_result' => 'QueueResult',
    'queue_sid' => 'QueueSid',
    'queue_time' => 'QueueTime',
  ));
  return twilio_voice_request() + $queue_result_request;
}

function twilio_queue_wait_request() {
  $queue_wait_request = _twilio_map_options($_REQUEST, array(
    'queue_position' => 'QueuePosition',
    'queue_sid' => 'QueueSid',
    'queue_time' => 'QueueTime',
    'avg_queue_time' => 'AvgQueueTime',
    'current_queue_size' => 'CurrentQueueSize',
  ));
  return twilio_voice_request() + $queue_wait_request;
}

function twilio_call_status_request() {
  $call_status_request = _twilio_map_options($_REQUEST, array(
    'call_duration' => 'CallDuration',
    'recording_url' => 'RecordingUrl',
    'recording_sid' => 'RecordingSid',
    'recording_duration' => 'RecordingDuration',
  ));
  return twilio_voice_request() + $call_status_request;
}

function twilio_dial_call_status_request() {
  $dial_call_status_request = _twilio_map_options($_REQUEST, array(
    'dial_call_status' => 'DialCallStatus',
    'dial_call_sid' => 'DialCallSid',
    'dial_call_duration' => 'DialCallDuration',
    'recording_url' => 'RecordingUrl',
    'queue_sid' => 'QueueSid',
    'dequeue_result' => 'DequeueResult',
    'dequeued_call_sid' => 'DequeuedCallSid',
    'dequeued_call_queue_time' => 'DequeuedCallQueueTime',
    'dequeued_call_duration' => 'DequeuedCallDuration',
  ));
  return twilio_voice_request() + $dial_call_status_request;
}

function twilio_request_callback($callback_type, $component, $request_callback, $return_response = FALSE) {
  if (twilio_validate_request()) {
    // Invoke a hook for the incoming message so other modules can do things.
    if ($component->status && function_exists($request_callback)) {
      $twilio_request = $request_callback();
      switch($callback_type){
        case 'voice_callback':
          $parameters = array(
              'voice_request' => $twilio_request,
          );
          break;
        case 'message_callback':
          $parameters = array(
              'message_request' => $twilio_request,
          );
          break;
        default:
          return FALSE;
      }

      $response = TRUE;
      if ($return_response) {
        $response = new Services_Twilio_Twiml;
        $parameters['twiml_response'] = $response;
      }
      try {
        rules_invoke_component($component->name, $parameters);
      }
      catch(RulesEvaluationException $e){
        watchdog_exception('Twilio', $e, 'Whoops!');
        return MENU_ACCESS_DENIED;
      }
      return $response;
    }
  }
  //return NULL;
  return MENU_ACCESS_DENIED;
}

function twilio_get_credentials(){
  return array(
    'account_sid' => variable_get('twilio_account', FALSE),
    'auth_token' => variable_get('twilio_token', FALSE),
  );
}

function twilio_load_libraries(){
  return (($library = libraries_load(TWILIO_LIBRARY)) && !empty($library['loaded']));
}

function twilio_validate_request(){
  if(twilio_load_libraries()){
    $twilio_credentials = twilio_get_credentials();
    $validator = new Services_Twilio_RequestValidator($twilio_credentials['auth_token']);
    $signature = $_SERVER["HTTP_X_TWILIO_SIGNATURE"];
    $url = url(request_uri(), array('absolute' => TRUE));
    $post_vars = $_POST;
    if ($validator->validate($signature, $url, $post_vars)) {
      //watchdog('Twilio', 'Incoming SMS message validated');
      return TRUE;
    }
  }
  watchdog('Twilio', 'Incoming Twilio Request could not be validated');
  return FALSE;
}

/**
 * Implements hook_token_info().
 *
 * @return array
 */
function twilio_token_info() {
  /*$info['types']['sms'] = array(
    'name' => t('SMS'),
    'description' => t('Tokens related to an SMS message.'),
  );
  $info['types']['voice'] = array(
    'name' => t('Voice call'),
    'description' => t('Tokens related to a voice call.'),
  );

  // Tokens for an SMS message.
  $info['tokens']['sms']['number'] = array(
    'name' => t("Number"),
    'description' => t("The phone number of the incoming SMS."),
  );
  $info['tokens']['sms']['number_twilio'] = array(
    'name' => t("Twilio Number"),
    'description' => t("The Twilio number that received the message."),
  );
  $info['tokens']['sms']['message'] = array(
    'name' => t("Message"),
    'description' => t("The message of the incoming SMS."),
  );
  $info['tokens']['sms']['media'] = array(
    'name' => t("Media"),
    'description' => t("The media attached to the incoming SMS."),
  );
  // Tokens for a voice call.
  $info['tokens']['voice']['number'] = array(
    'name' => t("Number"),
    'description' => t("The phone number of the incoming voice call."),
  );
  $info['tokens']['voice']['number_twilio'] = array(
    'name' => t("Twilio Number"),
    'description' => t("The Twilio number that received the voice call."),
  );
  return $info;*/
}

/**
 * Implements hook_tokens().
 *
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 *
 * @return array
 */
function twilio_tokens($type, $tokens, array $data = array(), array $options = array()) {
  /*$replacements = array();
  // SMS tokens.
  if ($type == 'sms' && !empty($data['sms'])) {
    $sms = $data['sms'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'number':
          $replacements[$original] = $sms['number'];
          break;

        case 'number_twilio':
          $replacements[$original] = $sms['number_twilio'];
          break;

        case 'message':
          $replacements[$original] = $sms['message'];
          break;

        case 'media':
          $replacements[$original] = $sms['media'];
          break;

      }
    }
  }
  // Voice call tokens.
  if ($type == 'voice' && !empty($data['voice'])) {
    $voice = $data['voice'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'number':
          $replacements[$original] = $voice['number'];
          break;

        case 'number_twilio':
          $replacements[$original] = $voice['number_twilio'];
          break;
      }
    }
  }
  return $replacements;*/
}

/**
 * Checks if a given phone number already exists in the database.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @return bool
 *   TRUE if it exists, FALSE otherwise
 */
function twilio_verify_duplicate_number($number) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->execute()
    ->fetchAssoc();
  if ($result['number'] == $number) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Determines if a number is associated with a user account.
 *
 * @param int $number
 *   The phone number we are searching for
 * @param bool $return_user
 *   Boolean flag to return a user object if TRUE
 *
 * @return bool
 *   TRUE or FALSE based on query
 */
function twilio_verify_number($number, $return_user = FALSE) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAssoc();
  if (!empty($result['uid'])) {
    if ($return_user) {
      return user_load($result['uid']);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function twilio_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'twilio'),
  );
}

function _twilio_map_options(&$parameters, $option_map) {
  $options = array();
  if(is_array($parameters)) {
    foreach($option_map as $key => $value) {
      if(isset($parameters[$value]) && !is_null($parameters[$value])) {
        $options[$key] = &$parameters[$value];
      }
    }
  }
  else if(is_object($parameters)) {
    foreach($option_map as $key => $value) {
      if(property_exists($parameters, $value) && !is_null($parameters->$value)) {
        $options[$key] = &$parameters->$value;
      }
    }
  }

  return $options;
}
